from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
import sqlite3
from datetime import datetime

from app.keyboards import get_menu_kb, get_delivery_method_kb
from app.handlers.common import OrderStates, carts
from app.handlers.cart import view_cart
from app.payment import create_redsys_invoice
from app.data_handler import get_customer_by_chat_id, get_product_by_id

router = Router()

@router.message(OrderStates.choosing_delivery, F.text == "üè™ –°–∞–º–æ–≤–∏–≤—ñ–∑")
async def process_self_pickup(message: Message, state: FSMContext):
    await state.update_data(delivery_method="self_pickup")
    
    await state.set_state(OrderStates.entering_phone)
    await message.answer(
        "–í–∏ –æ–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤–∏–≤—ñ–∑. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(OrderStates.choosing_delivery, F.text == "üöö –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑")
async def process_immediate_payment(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Redsys - –≤—ñ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Ñ–æ—Ä–º–∏"""
    chat_id = message.chat.id
    
    if not carts.get(chat_id):
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
        
    await state.update_data(delivery_method="immediate_payment")
    
    try:
        user_data = {
            "chat_id": chat_id,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "currency_code": (await state.get_data()).get("currency_code", "UAH")
        }
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–ø–ª–∞—Ç–∏ Redsys
        payment_data = create_redsys_invoice(carts[chat_id], user_data)
        
        if payment_data.get("reason") == "Ok":
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            await state.update_data(order_reference=payment_data.get("orderReference"))
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–ª–∞—Ç—ñ–∂–Ω—É —Ñ–æ—Ä–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            invoice_data = payment_data.get("invoice_data")
            
            await message.bot.send_invoice(
                chat_id=chat_id,
                title=invoice_data["title"],
                description=invoice_data["description"],
                payload=invoice_data["payload"],
                provider_token=invoice_data["provider_token"],
                currency=invoice_data["currency"],
                prices=invoice_data["prices"],
                need_name=invoice_data["need_name"],
                need_phone_number=invoice_data["need_phone_number"],
                need_email=invoice_data["need_email"]
            )
            
            await message.answer(
                "‚úÖ –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–ª–∞—Ç—ñ–∂–Ω—É —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
                reply_markup=get_menu_kb()
            )
            
            await state.set_state(OrderStates.confirming_payment)
            
        else:
            await message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É: {payment_data.get('reason', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
                reply_markup=get_menu_kb()
            )
            await state.set_state(OrderStates.choosing_category)
            
    except Exception as e:
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
            reply_markup=get_menu_kb()
        )
        await state.set_state(OrderStates.choosing_category)

@router.message(OrderStates.choosing_delivery, F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫—É")
async def back_to_cart(message: Message, state: FSMContext):
    await view_cart(message, state)

@router.message(OrderStates.entering_phone)
async def process_phone_number(message: Message, state: FSMContext):
    chat_id = message.chat.id
    phone_number = message.text
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if not (phone_number.startswith("+380") and len(phone_number) == 13 and phone_number[1:].isdigit()):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX")
        return
    
    await state.update_data(phone=phone_number)
    
    # –î–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ email, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤—ñ–¥—Ä–∞–∑—É –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    data = await state.get_data()
    if data.get("delivery_method") == "self_pickup":
        await process_self_pickup_confirmation(message, state)
    else:
        await state.set_state(OrderStates.entering_email)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:")

@router.message(OrderStates.entering_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ email
    if "@" not in email or "." not in email:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email")
        return
    
    await state.update_data(email=email)
    await process_self_pickup_confirmation(message, state)

async def process_self_pickup_confirmation(message: Message, state: FSMContext):
    chat_id = message.chat.id
    data = await state.get_data()
    
    if chat_id not in carts or not carts[chat_id]:
        await message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return
    
    # Save order to database
    try:
        # Get customer id based on chat_id
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        # Get customer ID
        cursor.execute("SELECT id FROM Customers WHERE chat_id = ?", (chat_id,))
        customer_id = cursor.fetchone()[0]
        
        # Update database with each ordered product
        for product_name, item in carts[chat_id].items():
            quantity = item.get("quantity", 1)
            price = item.get("price", 0)
            total = quantity * price
            
            # Get product ID
            cursor.execute("SELECT id FROM Products WHERE name = ?", (product_name,))
            product_id_result = cursor.fetchone()
            
            if not product_id_result:
                continue
                
            product_id = product_id_result[0]
            
            # Create order
            cursor.execute("""
                INSERT INTO Orders 
                (customer_id, product_id, quantity, total_price, delivery_method, status) 
                VALUES (?, ?, ?, ?, ?, ?)
            """, (customer_id, product_id, quantity, total, "self_pickup", "Pending"))
            
            # Update product stock
            cursor.execute("""
                UPDATE Products 
                SET stock = stock - ? 
                WHERE id = ? AND stock >= ?
            """, (quantity, product_id, quantity))
        
        # Save changes
        conn.commit()
        
        # Update customer phone if provided
        if data.get('phone'):
            cursor.execute("""
                UPDATE Customers 
                SET phone_number = ? 
                WHERE chat_id = ?
            """, (data.get('phone'), chat_id))
            
        # Update customer email if provided
        if data.get('email'):
            cursor.execute("""
                UPDATE Customers 
                SET email = ? 
                WHERE chat_id = ?
            """, (data.get('email'), chat_id))
            
        # Save changes again
        conn.commit()
        conn.close()
        
        # Send confirmation to user
        await message.answer(
            "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–º–æ–≤–∏–≤—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data.get('phone')} "
            "–¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∞–¥—Ä–µ—Å–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—É.\n\n"
            "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
            reply_markup=get_menu_kb()
        )
        
        # Clear cart
        if chat_id in carts:
            carts[chat_id] = {}
        
        await state.set_state(OrderStates.choosing_category)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {str(e)}.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
            reply_markup=get_menu_kb()
        )
        await state.set_state(OrderStates.choosing_category)

# Handle pre-checkout queries
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query, bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# Handle successful payments
@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: Message, state: FSMContext):
    chat_id = message.chat.id
    
    try:
        # Get customer id based on chat_id
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        # Get customer ID
        cursor.execute("SELECT id FROM Customers WHERE chat_id = ?", (chat_id,))
        customer_id = cursor.fetchone()[0]
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –∑ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Ñ–æ—Ä–º–∏ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        payment_info = message.successful_payment
        
        # Update contact information if available
        if payment_info.order_info:
            if payment_info.order_info.name:
                name_parts = payment_info.order_info.name.split()
                first_name = name_parts[0] if name_parts else ""
                last_name = " ".join(name_parts[1:]) if len(name_parts) > 1 else ""
                
                cursor.execute("""
                    UPDATE Customers 
                    SET first_name = ?, last_name = ? 
                    WHERE chat_id = ?
                """, (first_name, last_name, chat_id))
            
            if getattr(payment_info.order_info, 'phone_number', None):
                cursor.execute("""
                    UPDATE Customers 
                    SET phone_number = ? 
                    WHERE chat_id = ?
                """, (payment_info.order_info.phone_number, chat_id))
                
            if getattr(payment_info.order_info, 'email', None):
                cursor.execute("""
                    UPDATE Customers 
                    SET email = ? 
                    WHERE chat_id = ?
                """, (payment_info.order_info.email, chat_id))
        
        # Update database with each ordered product
        for product_name, item in carts[chat_id].items():
            quantity = item.get("quantity", 1)
            price = item.get("price", 0)
            total = quantity * price
            
            # Get product ID
            cursor.execute("SELECT id FROM Products WHERE name = ?", (product_name,))
            product_id_result = cursor.fetchone()
            
            if not product_id_result:
                continue
                
            product_id = product_id_result[0]
            
            # Create order
            cursor.execute("""
                INSERT INTO Orders 
                (customer_id, product_id, quantity, total_price, delivery_method, status) 
                VALUES (?, ?, ?, ?, ?, ?)
            """, (customer_id, product_id, quantity, total, "delivery", "Paid"))
            
            # Update product stock
            cursor.execute("""
                UPDATE Products 
                SET stock = stock - ? 
                WHERE id = ? AND stock >= ?
            """, (quantity, product_id, quantity))
        
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id in carts:
            carts[chat_id] = {}
        
        await message.answer(
            "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
            reply_markup=get_menu_kb()
        )
        
        await state.set_state(OrderStates.choosing_category)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {str(e)}.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏. –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞.",
            reply_markup=get_menu_kb()
        )
        await state.set_state(OrderStates.choosing_category)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
@router.message(OrderStates.confirming_payment)
async def check_payment_status(message: Message, state: FSMContext):
    if message.text.lower() in ["–Ω–∞–∑–∞–¥", "—Å–∫–∞—Å—É–≤–∞—Ç–∏", "–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏", "cancel"]:
        await message.answer("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –æ–ø–ª–∞—Ç—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç–µ—Å—å –¥–æ –º–µ–Ω—é.", reply_markup=get_menu_kb())
        await state.set_state(OrderStates.choosing_category)
        return
    
    await message.answer(
        "–©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø–ª–∞—Ç—ñ–∂–Ω—É —Ñ–æ—Ä–º—É, —è–∫—É –º–∏ –≤–∞–º –Ω–∞–¥—ñ—Å–ª–∞–ª–∏.\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–ø–ª–∞—Ç–æ—é, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
        reply_markup=get_menu_kb()
    )