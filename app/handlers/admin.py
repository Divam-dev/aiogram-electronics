from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3

from app.keyboards import (
    get_admin_main_kb, get_admin_products_kb, get_admin_users_kb, 
    get_admin_orders_kb, get_back_to_admin_kb, get_product_management_kb,
    get_order_status_kb, get_confirmation_kb
)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
ADMIN_IDS = [545363905]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

router = Router()

class AdminStates(StatesGroup):
    main_menu = State()
    
    # –ü—Ä–æ–¥—É–∫—Ç–∏
    products_menu = State()
    adding_product = State()
    adding_product_name = State()
    adding_product_category = State()
    adding_product_price = State()
    adding_product_stock = State()
    adding_product_fullname = State()
    adding_product_image = State()
    deleting_product = State()
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    users_menu = State()
    deleting_user = State()
    
    # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
    orders_menu = State()
    changing_order_status = State()
    confirm_action = State()

def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

@router.message(Command("admin"))
async def admin_command(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /admin"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
        return
    
    await message.answer(
        "üëë –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.\n–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=get_admin_main_kb()
    )
    await state.set_state(AdminStates.main_menu)

# --- –û–°–ù–û–í–ù–ï –ú–ï–ù–Æ ---

@router.message(AdminStates.main_menu, F.text == "üì¶ –¢–æ–≤–∞—Ä–∏")
async def products_menu(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–∑–¥—ñ–ª—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    await message.answer(
        "üì¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_products_kb()
    )
    await state.set_state(AdminStates.products_menu)

@router.message(AdminStates.main_menu, F.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
async def users_menu(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–∑–¥—ñ–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_users_kb()
    )
    await state.set_state(AdminStates.users_menu)

@router.message(AdminStates.main_menu, F.text == "üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def orders_menu(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–∑–¥—ñ–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    await message.answer(
        "üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_orders_kb()
    )
    await state.set_state(AdminStates.orders_menu)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é")
async def back_to_admin_menu(message: Message, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é"""
    await message.answer(
        "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å. –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=get_admin_main_kb()
    )
    await state.set_state(AdminStates.main_menu)

# --- –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –¢–û–í–ê–†–ê–ú–ò ---

@router.message(AdminStates.products_menu, F.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_products(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
    try:
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Products")
        products = cursor.fetchall()
        conn.close()
        
        if not products:
            await message.answer(
                "‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", 
                reply_markup=get_admin_products_kb()
            )
            return
        
        for product in products:
            product_info = (
                f"ID: {product[0]}\n"
                f"–ù–∞–∑–≤–∞: {product[1]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {product[2]}\n"
                f"–¶—ñ–Ω–∞: {product[3]} –≥—Ä–Ω\n"
                f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {product[4]} —à—Ç\n"
                f"–ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞: {product[5] or '-'}\n"
                f"URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {product[6] or '-'}"
            )
            
            await message.answer(product_info)
            
        await message.answer(
            "‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ.",
            reply_markup=get_admin_products_kb()
        )
    
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_admin_products_kb()
        )

@router.message(AdminStates.products_menu, F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:",
        reply_markup=get_back_to_admin_kb()
    )
    await state.set_state(AdminStates.adding_product_name)

@router.message(AdminStates.adding_product_name)
async def add_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    await state.update_data(product_name=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AdminStates.adding_product_category)

@router.message(AdminStates.adding_product_category)
async def add_product_category(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    await state.update_data(product_category=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (–ª–∏—à–µ —á–∏—Å–ª–æ):")
    await state.set_state(AdminStates.adding_product_price)

@router.message(AdminStates.adding_product_price)
async def add_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ü—ñ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    try:
        price = float(message.text)
        await state.update_data(product_price=price)
        await message.answer("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):")
        await state.set_state(AdminStates.adding_product_stock)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (–ª–∏—à–µ —á–∏—Å–ª–æ):")

@router.message(AdminStates.adding_product_stock)
async def add_product_stock(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    try:
        stock = int(message.text)
        await state.update_data(product_stock=stock)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É (–∞–±–æ '-' —è–∫—â–æ –Ω–µ–º–∞—î):")
        await state.set_state(AdminStates.adding_product_fullname)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):")

@router.message(AdminStates.adding_product_fullname)
async def add_product_fullname(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤–Ω–æ—ó –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    fullname = None if message.text == '-' else message.text
    await state.update_data(product_fullname=fullname)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–∞–±–æ '-' —è–∫—â–æ –Ω–µ–º–∞—î):")
    await state.set_state(AdminStates.adding_product_image)

@router.message(AdminStates.adding_product_image)
async def add_product_image(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
    image_url = None if message.text == '-' else message.text
    data = await state.get_data()
    
    try:
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        cursor.execute(
            """
            INSERT INTO Products (name, category, price, stock, fullname, image_url)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (
                data['product_name'],
                data['product_category'],
                data['product_price'],
                data['product_stock'],
                data['product_fullname'],
                image_url
            )
        )
        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: {data['product_name']}",
            reply_markup=get_admin_products_kb()
        )
        await state.set_state(AdminStates.products_menu)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {str(e)}",
            reply_markup=get_admin_products_kb()
        )
        await state.set_state(AdminStates.products_menu)

@router.message(AdminStates.products_menu, F.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        reply_markup=get_back_to_admin_kb()
    )
    await state.set_state(AdminStates.deleting_product)

@router.message(AdminStates.deleting_product)
async def delete_product(message: Message, state: FSMContext):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–∞ ID"""
    try:
        product_id = int(message.text)
        
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º ID
        cursor.execute("SELECT name FROM Products WHERE id = ?", (product_id,))
        product = cursor.fetchone()
        
        if not product:
            await message.answer(
                f"‚ùå –¢–æ–≤–∞—Ä –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_admin_products_kb()
            )
            await state.set_state(AdminStates.products_menu)
            conn.close()
            return
        
        product_name = product[0]
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä
        cursor.execute("DELETE FROM Products WHERE id = ?", (product_id,))
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' (ID: {product_id}) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.",
            reply_markup=get_admin_products_kb()
        )
        await state.set_state(AdminStates.products_menu)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):",
            reply_markup=get_back_to_admin_kb()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {str(e)}",
            reply_markup=get_admin_products_kb()
        )
        await state.set_state(AdminStates.products_menu)

# --- –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò ---

@router.message(AdminStates.users_menu, F.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
async def view_users(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Customers")
        users = cursor.fetchall()
        conn.close()
        
        if not users:
            await message.answer(
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", 
                reply_markup=get_admin_users_kb()
            )
            return
        
        for user in users:
            user_info = (
                f"ID: {user[0]}\n"
                f"Chat ID: {user[1]}\n"
                f"–Ü–º'—è: {user[2]}\n"
                f"–ü—Ä—ñ–∑–≤–∏—â–µ: {user[3] or '-'}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user[4] or '-'}\n"
                f"Email: {user[5] or '-'}"
            )
            
            await message.answer(user_info)
            
        await message.answer(
            "‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ.",
            reply_markup=get_admin_users_kb()
        )
    
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_admin_users_kb()
        )

@router.message(AdminStates.users_menu, F.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def delete_user_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        reply_markup=get_back_to_admin_kb()
    )
    await state.set_state(AdminStates.deleting_user)

@router.message(AdminStates.deleting_user)
async def delete_user(message: Message, state: FSMContext):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
    try:
        user_id = int(message.text)
        
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID
        cursor.execute("SELECT first_name, last_name FROM Customers WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            await message.answer(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_admin_users_kb()
            )
            await state.set_state(AdminStates.users_menu)
            conn.close()
            return
        
        user_name = f"{user[0]} {user[1]}" if user[1] else user[0]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤'—è–∑–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        cursor.execute("SELECT COUNT(*) FROM Orders WHERE customer_id = ?", (user_id,))
        orders_count = cursor.fetchone()[0]
        
        if orders_count > 0:
            await message.answer(
                f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á '{user_name}' (ID: {user_id}) –º–∞—î {orders_count} –∑–∞–º–æ–≤–ª–µ–Ω—å. "
                "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—Å—ñ –π–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
                reply_markup=get_confirmation_kb()
            )
            await state.update_data(user_id_to_delete=user_id, user_name_to_delete=user_name)
            await state.set_state(AdminStates.confirm_action)
            conn.close()
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("DELETE FROM Customers WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á '{user_name}' (ID: {user_id}) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.",
            reply_markup=get_admin_users_kb()
        )
        await state.set_state(AdminStates.users_menu)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):",
            reply_markup=get_back_to_admin_kb()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}",
            reply_markup=get_admin_users_kb()
        )
        await state.set_state(AdminStates.users_menu)

@router.message(AdminStates.confirm_action, F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_user_delete(message: Message, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏"""
    data = await state.get_data()
    user_id = data.get("user_id_to_delete")
    user_name = data.get("user_name_to_delete")
    
    try:
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("DELETE FROM Orders WHERE customer_id = ?", (user_id,))
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("DELETE FROM Customers WHERE id = ?", (user_id,))
        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á '{user_name}' (ID: {user_id}) —Ç–∞ –≤—Å—ñ –π–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ.",
            reply_markup=get_admin_users_kb()
        )
        await state.set_state(AdminStates.users_menu)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}",
            reply_markup=get_admin_users_kb()
        )
        await state.set_state(AdminStates.users_menu)

@router.message(AdminStates.confirm_action, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_user_delete(message: Message, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await message.answer(
        "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=get_admin_users_kb()
    )
    await state.set_state(AdminStates.users_menu)

# --- –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–ú–ò ---

@router.message(AdminStates.orders_menu, F.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def view_orders(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    try:
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        query = """
        SELECT 
            o.id, c.first_name, c.last_name, c.phone_number, 
            p.name, o.quantity, o.total_price, o.order_date, 
            o.delivery_method, o.status 
        FROM Orders o
        JOIN Customers c ON o.customer_id = c.id
        JOIN Products p ON o.product_id = p.id
        ORDER BY o.order_date DESC
        """
        
        cursor.execute(query)
        orders = cursor.fetchall()
        conn.close()
        
        if not orders:
            await message.answer(
                "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", 
                reply_markup=get_admin_orders_kb()
            )
            return
        
        for order in orders:
            customer_name = f"{order[1]} {order[2]}" if order[2] else order[1]
            phone = order[3] or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            
            order_info = (
                f"ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order[0]}\n"
                f"–ö–ª—ñ—î–Ω—Ç: {customer_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–¢–æ–≤–∞—Ä: {order[4]}\n"
                f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order[5]}\n"
                f"–°—É–º–∞: {order[6]} –≥—Ä–Ω\n"
                f"–î–∞—Ç–∞: {order[7]}\n"
                f"–î–æ—Å—Ç–∞–≤–∫–∞: {order[8]}\n"
                f"–°—Ç–∞—Ç—É—Å: {order[9]}"
            )
            
            await message.answer(order_info)
            
        await message.answer(
            "‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ.",
            reply_markup=get_admin_orders_kb()
        )
    
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_admin_orders_kb()
        )

@router.message(AdminStates.orders_menu, F.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def change_order_status_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:",
        reply_markup=get_back_to_admin_kb()
    )
    await state.set_state(AdminStates.changing_order_status)

@router.message(AdminStates.changing_order_status)
async def select_order_for_status_change(message: Message, state: FSMContext):
    """–í–∏–±—ñ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É"""
    try:
        order_id = int(message.text)
        
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º ID
        cursor.execute("""
            SELECT o.id, p.name, o.status 
            FROM Orders o
            JOIN Products p ON o.product_id = p.id
            WHERE o.id = ?
        """, (order_id,))
        
        order = cursor.fetchone()
        conn.close()
        
        if not order:
            await message.answer(
                f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_admin_orders_kb()
            )
            await state.set_state(AdminStates.orders_menu)
            return
        
        await state.update_data(order_id=order_id, product_name=order[1], current_status=order[2])
        
        await message.answer(
            f"–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} ({order[1]}).\n–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {order[2]}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=get_order_status_kb()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):",
            reply_markup=get_back_to_admin_kb()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_admin_orders_kb()
        )
        await state.set_state(AdminStates.orders_menu)

@router.message(AdminStates.changing_order_status, F.text.in_(["Pending", "Paid", "Processing", "Shipped", "Delivered", "Cancelled"]))
async def update_order_status(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    data = await state.get_data()
    order_id = data.get("order_id")
    new_status = message.text
    
    try:
        conn = sqlite3.connect('electronics_store.db')
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE Orders SET status = ? WHERE id = ?",
            (new_status, order_id)
        )
        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_status}'.",
            reply_markup=get_admin_orders_kb()
        )
        await state.set_state(AdminStates.orders_menu)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {str(e)}",
            reply_markup=get_admin_orders_kb()
        )
        await state.set_state(AdminStates.orders_menu)